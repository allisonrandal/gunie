# Gunie parses Perl 1.0 source code

package main

type Gunie Peg {

}

Prog <- Lineseq EndOfFile

Lineseq <- Line+

Line <- ( Comment / Decl / Cond / Loop / Block / Sideff ';') WS

Decl <- Subrout

Subrout <- SUB WS WORD WS Block

Block <- '{' WS Lineseq '}' WS

Cond <- (IF/UNLESS) WS ( '(' Expr ')' / Block ) WS CompBlock

Else <- ELSE WS Block
      / ELSIF WS '(' Expr ')' WS CompBlock

CompBlock <- Block WS (CONTINUE WS Block / Else)?

Loop <- Label? (
            WHILE WS ( '(' Expr? ')' / Block ) WS CompBlock
          / FOR WS '(' WS Sideff? WS ';' WS Expr? WS ';' WS Sideff? WS ')' WS Block
        )

Label <- WORD ':' WS

LoopMod <- ( WHILE / UNTIL ) WS Expr

CondMod <- ( IF / UNLESS ) WS Expr

Sideff <- Expr ( CondMod / LoopMod )?

Expr <- PrintExpr / CExpr

PrintExpr <- PRINT WS ( WORD WS Expr / WORD / Expr )

CExpr <- SExpr (',' SExpr)*

SExpr <- ( AssignExpr / CondExpr ) WS

AssignExpr <- Term ASSIGN WS SExpr


Term <- PostfixExpr
      / ( INC / DEC / NOT / NEGATE ) Term
      / KeywordExpr

PostfixExpr <-  PrimExpr ( INC / DEC )? WS

PrimExpr <- ARYLEN / ARYELEM / HASHELEM / REG / ARY / READ / PatternExpr / StringExpr / Constant / '(' Expr ')'

CondExpr <- RangeExpr (TERNIF WS RangeExpr TERNELSE WS RangeExpr)*

RangeExpr <- LogicExpr (DOTDOT WS LogicExpr)*

LogicExpr <- EqualityExpr ((ANDAND/OROR/XOR/BITAND/BITOR) WS EqualityExpr)*

EqualityExpr <- RelationalExpr ((EQ/NE/SEQ/SNE) WS RelationalExpr)*

RelationalExpr <- ShiftExpr ((LE/GE/LT/GT/SLE/SGE/SLT/SGT) WS ShiftExpr)*

ShiftExpr <- AdditiveExpr ((LEFTSHIFT/RIGHTSHIFT) WS AdditiveExpr)*

AdditiveExpr <- MultiplicativeExpr ((ADD/SUBTRACT) WS MultiplicativeExpr)*

MultiplicativeExpr <- Term ((MULTIPLY/DIVIDE/MODULO) WS Term)*

PatternExpr <- 's' [/] [^/]* [/]  [^/]* [/] 'g'? WS
             / [/] [^/]* [/] WS

StringExpr <- StringLiteral / CharLiteral / BacktickLiteral

StringLiteral <- [\"] StringChar* [\"] WS

StringChar <- StringEscape / ![\"\\] .
StringEscape <- '\\' [\"\\nrt]

CharLiteral <- [\'] [^\']* [\'] WS

BacktickLiteral <- [`] [^`]* [`] WS

Constant <- FloatConstant / IntegerConstant

IntegerConstant <- [1-9][0-9]* / [0-9]

FloatConstant <- [0-9]* '.' [0-9]+

KeywordExpr <- ( DO WS ( Block / WORD '(' Expr? ')' )
               / OPEN WS ( WORD / '(' WS WORD WS (',' WS Expr)? ')' )
               / CLOSE WS ( WORD / '(' WS WORD WS ')' )
               / FEOF WS ( '(' WS WORD? WS ')' )?
               / JOIN WS '(' WS ( WORD / SExpr ) WS ',' WS Expr WS ')'
               / DIE WS SExpr
               / LENGTH '(' Expr ')'
               / LAST ( WS !(IF/UNLESS/WHILE/UNTIL) WORD )?
               / NEXT ( WS !(IF/UNLESS/WHILE/UNTIL) WORD )?
               / REDO WS WORD?
               ) WS


WORD <- ([[a-z]] / [0-9] / [_])+
WS <- Comment? [ \n\r\t]*

Comment <- '#' (!'\n' .)*

REG <- SPECIALREG / '$' WORD
ARY <- '@' WORD
ARYLEN <- '$' '#' WORD
ARYELEM <- REG '[' Expr ']'
HASHELEM <- REG '{' Expr '}'
READ <- '<' WORD '>'
SPECIALREG <- '$' [ _#]


ASSIGN <- '='
MULTIPLY <- '*'
DIVIDE <- '/'
MODULO <- '%'
REPEAT <- 'x'
ADD <- '+'
SUBTRACT <- '-'
NEGATE <- '-'
INC <- '++'
DEC <- '--'
LEFTSHIFT <- '<<'
RIGHTSHIFT <- '>>'
MATCH <- '=~'
NMATCH <- '!~'
LT <- '<'
GT <- '>'
LE <- '<='
GE <- '>='
EQ <- '=='
NE <- '!='
SLT <- 'lt' / 'LT'
SGT <- 'gt' / 'GT'
SLE <- 'le' / 'LE'
SGE <- 'ge' / 'GE'
SEQ <- 'eq' / 'EQ'
SNE <- 'ne' / 'NE'
ANDAND <- '&&'
OROR <- '||'
NOT <- '!'
BITAND <- '&'
BITOR <- '!'
XOR <- '^'
CONCAT <- '.'
DOTDOT <- '..'
COMPLEMENT <- '~'
TERNIF <- '?'
TERNELSE <- ':'

IF <- 'if'
ELSIF <- 'elsif'
ELSE <- 'else'
UNLESS <- 'unless'
FOR <- 'for'
DO <- 'do'
WHILE <- 'while'
UNTIL <- 'until'
CONTINUE <- 'continue'
LAST <- 'last'
NEXT <- 'next'

CHDIR <- 'chdir'
CLOSE <- 'close'
CRYPT <- 'crypt'
CHOP <- 'chop'
CHMOD <- 'chmod'
CHOWN <- 'chown'
DIE <- 'die'
EXIT <- 'exit'
FEOF <- 'eof'
EXP <- 'exp'
EACH <- 'each'
EXEC <- 'exec'
FORMAT <- 'format'
FORK <- 'fork'
GOTO <- 'goto'
GMTIME <- 'gmtime'
HEX <- 'hex'
INDEX <- 'index'
INT <- 'int'
JOIN <- 'join'
KEYS <- 'keys'
KILL <- 'kill'
LENGTH <- 'length'
LOCALTIME <- 'localtime'
LOG <- 'log'
LENGTH <- 'length'
OPEN <- 'open'
ORD <- 'ord'
OCT <- 'oct'
PRINT <- 'print'
PRTF <- 'printf'
PUSH <- 'push'
POP <- 'pop'
RESET <- 'reset'
REDO <- 'redo'
RENAME <- 'rename'
SHIFT <- 'shift'
SPLIT <- 'split'
SUBSTR <- 'substr'
SPRINTF <- 'sprintf'
SUB <- 'sub'
SELECT <- 'select'
SEEK <- 'seek'
STAT <- 'stat'
SQRT <- 'sqrt'
SLEEP <- 'sleep'
SYSTEM <- 'system'
TELL <- 'tell'
TIME <- 'time'
TIMES <- 'times'
USING <- 'using'
UMASK <- 'umask'
UNSHIFT <- 'unshift'
UNLINK <- 'unlink'
VALUES <- 'values'
WRITE <- 'write'

EndOfFile <- !.
