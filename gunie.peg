# Gunie parses Perl 1.0 source code

package main

type Gunie Peg {

}

Prog <- Lineseq EndOfFile

Lineseq <- Line+

Line <- ( Comment
        / Cond
        / Sideff ';'
        ) WS

Block <- '{' WS Lineseq '}' WS

Cond <- (IF/UNLESS) WS ( '(' Expr ')' / Block ) WS CompBlock

Else <- ELSE WS Block
      / ELSIF WS '(' Expr ')' CompBlock

CompBlock <- Block (CONTINUE Block / Else)?

#Label <- (WORD ':')?

Sideff <- Expr

Expr <- Print / CExpr

Print <- PRINT WS (WORD / CExpr)

CExpr <- SExpr (',' SExpr)*

SExpr <- ( AssignExpr / CondExpr ) WS

AssignExpr <- UnaryExpr ASSIGN WS SExpr


UnaryExpr <- PostfixExpr
           / ( INC / DEC / NOT / NEGATE ) UnaryExpr

PostfixExpr <-  PrimExpr ( INC / DEC )? WS

PrimExpr <- ( REG / ARY / StringLiteral / '(' Expr ')' )

CondExpr <- RangeExpr (TERNIF WS RangeExpr TERNELSE WS RangeExpr)*

RangeExpr <- LogicExpr (DOTDOT WS LogicExpr)*

LogicExpr <- EqualityExpr ((ANDAND/OROR/XOR/BITAND/BITOR) WS EqualityExpr)*

EqualityExpr <- RelationalExpr ((EQ/NE/SEQ/SNE) WS RelationalExpr)*

RelationalExpr <- ShiftExpr ((LE/GE/LT/GT/SLE/SGE/SLT/SGT) WS ShiftExpr)*

ShiftExpr <- AdditiveExpr ((LEFTSHIFT/RIGHTSHIFT) WS AdditiveExpr)*

AdditiveExpr <- MultiplicativeExpr ((ADD/SUBTRACT) WS MultiplicativeExpr)*

MultiplicativeExpr <- UnaryExpr ((MULTIPLY/DIVIDE/MODULO) WS UnaryExpr)*

Term <- ( REG / ARY / StringLiteral / '(' Expr ')' ) WS

StringLiteral <- [\"\'] StringChar* [\"\'] WS

StringChar <- Escape / ![\"\'\\] .

Escape <- '\\' ['\"\\nrt]


Comment <- '#' (!'\n' .)*

WORD <- ([a-z] / [A-Z] / [_])+
WS <- [ \n\r\t]*

REG <- '$' WORD
ARY <- '@' WORD


ASSIGN <- '='
MULTIPLY <- '*'
DIVIDE <- '/'
MODULO <- '%'
REPEAT <- 'x'
ADD <- '+'
SUBTRACT <- '-'
NEGATE <- '-'
INC <- '++'
DEC <- '--'
LEFTSHIFT <- '<<'
RIGHTSHIFT <- '>>'
MATCH <- '=~'
NMATCH <- '!~'
LT <- '<'
GT <- '>'
LE <- '<='
GE <- '>='
EQ <- '=='
NE <- '!='
SLT <- 'lt' / 'LT'
SGT <- 'gt' / 'GT'
SLE <- 'le' / 'LE'
SGE <- 'ge' / 'GE'
SEQ <- 'eq' / 'EQ'
SNE <- 'ne' / 'NE'
ANDAND <- '&&'
OROR <- '||'
NOT <- '!'
BITAND <- '&'
BITOR <- '!'
XOR <- '^'
CONCAT <- '.'
DOTDOT <- '..'
COMPLEMENT <- '~'
TERNIF <- '?'
TERNELSE <- ':'

IF <- 'if'
ELSIF <- 'elsif'
ELSE <- 'else'
UNLESS <- 'unless'
FOR <- 'for'
DO <- 'do'
WHILE <- 'while'
UNTIL <- 'until'
CONTINUE <- 'continue'
LAST <- 'last'
NEXT <- 'next'

CHDIR <- 'chdir'
CLOSE <- 'close'
CRYPT <- 'crypt'
CHOP <- 'chop'
CHMOD <- 'chmod'
CHOWN <- 'chown'
EXIT <- 'exit'
FEOF <- 'eof'
EXP <- 'exp'
EACH <- 'each'
EXEC <- 'exec'
FORMAT <- 'format'
FORK <- 'fork'
GOTO <- 'goto'
GMTIME <- 'gmtime'
HEX <- 'hex'
INDEX <- 'index'
INT <- 'int'
JOIN <- 'join'
KEYS <- 'keys'
KILL <- 'kill'
LENGTH <- 'length'
LOCALTIME <- 'localtime'
LOG <- 'log'
LENGTH <- 'length'
OPEN <- 'open'
ORD <- 'ord'
OCT <- 'oct'
PRINT <- 'print'
PRTF <- 'printf'
PUSH <- 'push'
POP <- 'pop'
RESET <- 'reset'
REDO <- 'redo'
RENAME <- 'rename'
SHIFT <- 'shift'
SPLIT <- 'split'
SUBSTR <- 'substr'
SPRINTF <- 'sprintf'
SUB <- 'sub'
SELECT <- 'select'
SEEK <- 'seek'
STAT <- 'stat'
SQRT <- 'sqrt'
SLEEP <- 'sleep'
SYSTEM <- 'system'
TELL <- 'tell'
TIME <- 'time'
TIMES <- 'times'
USING <- 'using'
UMASK <- 'umask'
UNSHIFT <- 'unshift'
UNLINK <- 'unlink'
VALUES <- 'values'
WRITE <- 'write'

EndOfFile <- !.
